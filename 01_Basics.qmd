---
jupyter: python3
execute:
  eval: false
---

# Базовые операции рендеринга

Визуализация данных в QGIS возможна не только посредством графического интерфейса, но также путем программной компоновки карт. Преимущество программного отображения в QGIS по сравнению с тем, что вы можете сделать на чистом Python --- в том, что становится доступен невероятно мощный функционал и производительность графического движка QGIS.

Первая операция, которая может быть полезной, это получение ссылки на экземпляр проекта:

```{python}
QgsProject.instance()
```

Главное, для чего он может быть полезен --- это управление списком отображаемых слоёв. Можно получить список слоев или удалить все слои из содержимого карты:

```{python}
QgsProject.instance().mapLayers().values() # список слоёв
QgsProject.instance().removeAllMapLayers() # удаление всех слоёв
```

Если необходимо чтобы скрипт собирал карту с нуля каждый раз при запуске, следует расположить вызов `removeAllMapLayers()` в самом начале. Это будет гарантировать, что сборка проекта начнется с чистого листа.

Сборку логично начать с добавления слоёв, которое осуществляется посредством следующей команды:

```{python}
layer = iface.addVectorLayer(path)
layer = iface.addRasterLayer(path)
```

где `path` --- полный путь к данным, `layer` --- переменная, которая будет хранить ссылку на слой в таблице содержания. Вы можете ее называть любым подходящим именем.

Обратите внимание на переменную `iface`. **Это самая важная переменная в скрипте**. Создавать её не нужно, она доступна всегда по умолчанию и представляет собой экземпляр класса `QgsInterface`. Через него вы получаете доступ к компоненте карты, меню, панелям инструментов и другим компонентам.

После того как слой добавлен на карту, можно заниматься его оформлением. Для того необходимо получить символику:

```{python}
symbol = layer.renderer().symbol()
```

В целом, не обязательно записывать символ в какую-то переменную, но если вы планируете осуществлять более чем одну настройку символа, то лучше это сделать, чтобы каждый раз не вызывать указанную последовательность функций.

Часть функций по оформлению слоя доступна непосредственно через объект символа. Например, глобальный цвет, толщину линии или размер пунсона можно задать следующим образом:

```{python}
symbol.setColor(color) # заливка
symbol.setWidth(width) # толщина
symbol.setSize(size)   # размер
```

где `color` --- объект класса `QColor`, определяющий цвет (см. далее).

Большинство же настроек символики делается через слои символов, извлечь каждый из которых можно следующим образом:

```{python}
symbol.symbolLayer(i)
```

где `i` --- номер слоя символа. По умолчанию каждый символ имеет один слой с индексом **0**. Для доступа к нему соответственно надо вызвать `symbol.symbolLayer(0)`.

Например, цвет и паттерн линии или обводки полигона устанавливаются так:

```{python}
symbol.symbolLayer(0).setStrokeColor(color) # цвет линии
symbol.symbolLayer(0).setStrokeStyle(style) # паттерн линии
```

где `style` --- экземпляр класс `PenStyle`.

Для создания цветов и стилей линий существуют свои классы. Цвет можно создать по названию или цветовым компонентам:

```{python}
color = QColor('azure')
color = QColor(120, 240, 75)
```

А вот создание стиля линии делается не через нативные классы QGIS, а посредством классов библиотеки Qt, на которой реализован вообще весь QGIS:

```{python}
style = Qt.PenStyle(Qt.NoPen) # Нет обводки
style = Qt.PenStyle(Qt.DotLine) # Пунктир
style = Qt.PenStyle(Qt.SolidLine) # Сплошная
```

Полный [перечень](https://doc.qt.io/qtforpython-5/PySide2/QtCore/Qt.html#PySide2.QtCore.PySide2.QtCore.Qt.PenStyle) стилей Qt согласно официальной документации выглядит так:

![Стили линий Qt](images/paste-67B70BB8.png)

После того как вы настроили внешний вид слоя, необходимо сделать 2 вещи: инициировать его перерисовку на карте, а также обновить его легенду, для того чтобы она соответствовала символике. Делается это следующим образом:

```{python}
layer.triggerRepaint() # перерисовать слой
iface.layerTreeView().refreshLayerSymbology(layer.id()) # обновить легенду
```

Обратите внимание на то, что легендой слоя владеет не сам слой, а компонента таблицы содержания (`layerTreeView`).

Команды перерисовки карты и легенды должны быть вызваны для каждого слоя, оформление которого изменено программным путём. Если необходимо одинаковым образом обновить все слои карты (например, задать им прозрачность или покрасить в черный цвет), то это можно сделать в цикле:

```{python}
layers = QgsProject.instance().mapLayers().values()
for layer in layers:
  ... # изменение символики
  ... # изменение символики
  layer.triggerRepaint()
  iface.layerTreeView().refreshLayerSymbology(layer.id())
  
```