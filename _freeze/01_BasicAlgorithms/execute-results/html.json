{
  "hash": "fff5177a80691b1918c8b6885c83a3d6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Основы компьютерной графики\"\nsubtitle: \"Визуализация пространственных данных\"\ndate: today\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Визуализация пространственных данных: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Компьютерная графика\n\nНаука и искусство визуальной коммуникации посредством компьютерного дисплея и инструментом интерактивного взаимодействия с ним.\n\n-   Визуальный аспект: компьютер → человек\n-   Интерактивный аспект: человек → компьютер\n\n![](images/people.png){width=\"100%\"}\n\n## Мультидисциплинарность\n\n-   физика\n\n-   математика\n\n-   человеческое зрение\n\n-   человеко-машинное взимодействие\n\n-   программная и аппаратная инженерия\n\n-   графический дизайн\n\n-   ...\n\n## Связь с компьютерным зрением\n\n**Компьютерная графика**: реализация с определенного ракурса внешнего вида сцены, в которую погружены модели объектов под заданными условиями освещения.\n\n**Компьютерное зрение**: определение параметров сцены и погруженных в нее объектов при заданных допущениях.\n\n![](images/sketch.png){width=\"75%\"}\n\n\\[Lesage, Visvalingam, 2002\\]\n\n## Графический конвейер\n\n![](images/conveyor1.png){width=\"80%\"}\n\nВ статичной сцене графический конвейер определяет последовательность отрисовки изображения.\n\n## Графический конвейер\n\n![](images/conveyor2.png){width=\"65%\"}\n\nВзаимодействие с пользователем может оказывать влияние на последующее поведение графического приложения\n\n## Структура 2D-приложения\n\n::: columns\n::: {.column width=\"40%\"}\n![](images/2D_app.png){width=\"100%\"}\n:::\n\n::: {.column width=\"60%\"}\n-   **Графическая платформа** отвечает за взаимодействие приложения и оборудования\n\n-   **Модель приложения** (application model) представляет визуализируемые данные\n\n-   **Клиентская область** (client area) определяет пространство, в котором приложение выполняет отрисовку.\n\n-   **Порт просмотра** (viewport) определяет часть клиентской области, где генератор сцены выполняет отрисовку модели\n:::\n:::\n\n## Эволюция графической платформы\n\n**1980-е — начало 1990-х** *(Apple QuickDraw, Microsoft GDI)*: отрисовка пикселей на прямоугольной канве в целочисленных координатах. Отрисовка *примитивов*: геометрических форм или битмапов (пиксельных карт).\n\n-   Каждый примитив заполняется путем вызова определенной функции (например, `FillRectangle`).\n-   Размер объекта зависит от разрешения объекта. Более низкое разрешение (крупные пикселы) — больше размеры объектов.\n\n**Середина 1990-х — н.вр.** Переход к координатам с плавающей точкой позволил решить проблему зависимости размера изображения от системы координат.\n\n## Непосредственный режим\n\nВ **непосредственном режиме** *(immediate mode)* клиент через графическую платформу обращается непосредственно к выводящему устройству.\n\n-   Запись примитивов, переданных приложением, не выполняется.\n-   При смене сцены приложение должно перерисовать ее целиком.\n\n![](images/immediate.png){width=\"100%\"}\n\n## Сохраненный режим\n\nВ **сохраненном режиме** *(retained mode)* графическая платформа хранит спецификацию сцены в виде графа сцены *(scene graph)*.\n\n-   Объекты могут добавляться в граф сцены последовательно.\n-   Каждое изменение графа приводит к перерисовке сцены\n\n![](images/retained.png){width=\"100%\"}\n\n## Процедурный и декларативный подходы\n\n::: columns\n::: {.column width=\"50%\"}\n**Процедурный код** пишется на императивном языке программирования\n\n-   Описывает *действия*\n-   Стандарт при взаимодействии с графической платформой\n-   В геоинформационных пакетах применяется на низком уровне, невидимом для пользователя\n:::\n\n::: {.column width=\"50%\"}\n**Декларативные спецификации** фиксируются на языке разметки\n\n-   Описывают *результаты*\n-   Вспомогательное средство в графических платформах\n-   В геоинформационных пакетах применяется на высоком уровне при описании стилей карт (CSS, LYR, QML, SLD, YSLD)\n:::\n:::\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}