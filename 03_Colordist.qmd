---
jupyter: python3
execute:
  eval: false
---

# Анализ цветовых щкал

Одна из ключевых задач картографической визуализации --- обеспечить наглядность и равномерность цветовых шкал, используемых при визуализации данных. Использование неперцептивных цветовых пространств часто ведет к тому, что визальные различия между соседними градациями шкалы могут значительно варьироваться в пределах шкалы. В данном упражнении мы научимся извлекать уже заданную шкалу из слоя и оценивать ее цветовую равномерность.

## Установка модуля colorio

Перцептивная оценка цветовых градиентов требует вычислений в перцептивных цветовых пространствах. При этом стандартный класс `QColor` в QGIS ожидаемо [поддерживает](https://doc.qt.io/qtforpython-5/PySide2/QtGui/QColor.html) только общеупотребительные пространства **RBG**, **CMYK**, **HSL** и **HSV**:

![Методы класса QColor для возврата значения цвета в виде массива цветовых компонент](images/paste-83DE56B6.png)

Для преобразования из этих пространств в перцептивные можно использовать библиотеку [colorio](https://github.com/nschloe/colorio) . Чтобы ее установить в Python при QGIS введите в консоли Python следующие команды:

```{python}
import pip
pip.main(['install', 'colorio'])
```

После этого можно подключить требуемые библиотеки в начале скрипта:

```{python}
import numpy as np
import colorio
```

## Извлечение цветовой шкалы

Для того чтобы выполнить анализ равномерности цветовой шкалы, необходимо получить цвета всех её классов. Для этого необходимо выполнить следующую последовательность действий:

1.  Выбрать активный слой (`layer = iface.activeLayer()`).
2.  Получить его рендерер (`renderer = layer.renderer()`).
3.  Получить список интервалов рендерера (`ranges = renderer.ranges()`).
4.  Извлечь цвет для каждого интервала и наполнить этими цветами массив.

Если известен список интервалов, то единичный можно получить просто по индексу. Печатается он довольно наглядно:

```{>>> ranges[0]}
<QgsRendererRange: 0 - 364700 (0 - 364700)>
```

Доступ к цвету интервала можно получить через символ и его цвет:

```{>>> ranges[0].symbol().color()}
<PyQt5.QtGui.QColor object at 0x194440dd0>
```

В таком виде он, конечно, не очень удобен для последующего анализа. Поэтому можно воспользоваться одной из вышеприведенных функций для получения массива цветов:

```{>>> ranges[0].symbol().color().getRgb()}
(255, 255, 255, 255)
```

Можно теперь объединить все эти операции в одну, получив массив цветовых массивов. Для удобства каждый цвет целесообразно преобразовать в массив `numpy` и привести его у типу с плавающей точкой:

```{python}
colors = [np.array(r.symbol().color().getRgb()).astype(float) for r in renderer.ranges()]
```
